-- Crear tablas solo si no existen
CREATE TABLE IF NOT EXISTS PERSONA (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NOMBRES VARCHAR(255) NOT NULL,
    APELLIDOS VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS FACULTAD (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(255) NOT NULL,
    DECANO_ID BIGINT,
    FOREIGN KEY (DECANO_ID) REFERENCES PERSONA(ID)
);

CREATE TABLE IF NOT EXISTS PROGRAMA (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(255) NOT NULL,
    DURACION DOUBLE,
    REGISTRO_CALIFICADO DATE,
    FACULTAD_ID BIGINT,
    FOREIGN KEY (FACULTAD_ID) REFERENCES FACULTAD(ID)
);

CREATE TABLE IF NOT EXISTS ESTUDIANTE (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NOMBRES VARCHAR(255) NOT NULL,
    APELLIDOS VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    CODIGO BIGINT
);

CREATE TABLE IF NOT EXISTS PROFESOR (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NOMBRES VARCHAR(255) NOT NULL,
    APELLIDOS VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    TIPO_CONTRATO VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS CURSO (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(255) NOT NULL,
    PROGRAMA_ID BIGINT,
    ACTIVO BOOLEAN,
    FOREIGN KEY (PROGRAMA_ID) REFERENCES PROGRAMA(ID)
);

CREATE TABLE IF NOT EXISTS INSCRIPCION (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    ANO INT,
    SEMESTRE INT,
    ESTUDIANTE_ID BIGINT,
    CURSO_ID BIGINT,
    FOREIGN KEY (ESTUDIANTE_ID) REFERENCES ESTUDIANTE(ID),
    FOREIGN KEY (CURSO_ID) REFERENCES CURSO(ID)
);

CREATE TABLE IF NOT EXISTS CURSOPROFESOR (
    PROFESOR_ID BIGINT,
    CURSO_ID BIGINT,
    ANO INT,
    SEMESTRE INT,
    PRIMARY KEY (PROFESOR_ID, CURSO_ID, ANO, SEMESTRE),
    FOREIGN KEY (PROFESOR_ID) REFERENCES PROFESOR(ID),
    FOREIGN KEY (CURSO_ID) REFERENCES CURSO(ID)
);

-- Datos de ejemplo
MERGE INTO PERSONA (ID, NOMBRES, APELLIDOS, EMAIL)
KEY (ID)
VALUES
(1, 'Ricardo', 'Perez', 'ricardo.perez@university.com'),
(2, 'Ana', 'Lopez', 'ana.lopez@university.com'),
(3, 'Luis', 'Martinez', 'luis.martinez@external.com');

MERGE INTO FACULTAD (ID, NOMBRE, DECANO_ID)
KEY (ID)
VALUES
(1, 'Ingeniería', 1),
(2, 'Ciencias Sociales', NULL);

MERGE INTO PROGRAMA (ID, NOMBRE, DURACION, REGISTRO_CALIFICADO, FACULTAD_ID)
KEY (ID)
VALUES
(1, 'Ingeniería de Sistemas', 10, DATE '2023-01-15', 1),
(2, 'Comunicación Social', 8, DATE '2022-05-20', 2);

MERGE INTO PROFESOR (ID, NOMBRES, APELLIDOS, EMAIL, TIPO_CONTRATO)
KEY (ID)
VALUES
(1, 'Carlos', 'Ramirez', 'carlos.r@university.com', 'Tiempo Completo'),
(2, 'Marta', 'Jimenez', 'marta.j@university.com', 'Cátedra');

MERGE INTO ESTUDIANTE (ID, NOMBRES, APELLIDOS, EMAIL, CODIGO)
KEY (ID)
VALUES
(1, 'Juan', 'Gomez', 'juan.g@student.com', 20241001),
(2, 'Maria', 'Rodriguez', 'maria.r@student.com', 20241002);

MERGE INTO CURSO (ID, NOMBRE, PROGRAMA_ID, ACTIVO)
KEY (ID)
VALUES
(1, 'Cálculo Diferencial', 1, TRUE),
(2, 'Programación Orientada a Objetos', 1, TRUE),
(3, 'Teorías de la Comunicación', 2, FALSE);

MERGE INTO CURSOPROFESOR (PROFESOR_ID, CURSO_ID, ANO, SEMESTRE)
KEY (PROFESOR_ID, CURSO_ID, ANO, SEMESTRE)
VALUES
(1, 1, 2025, 1),
(2, 2, 2025, 1);

MERGE INTO INSCRIPCION (ID, ESTUDIANTE_ID, CURSO_ID, ANO, SEMESTRE)
KEY (ID)
VALUES
(1, 1, 1, 2025, 1),
(2, 2, 2, 2025, 1);

-- Asegurar que AUTO_INCREMENT esté sincronizado en todas las tablas con ID AUTO_INCREMENT
ALTER TABLE PERSONA ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM PERSONA);
ALTER TABLE FACULTAD ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM FACULTAD);
ALTER TABLE PROGRAMA ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM PROGRAMA);
ALTER TABLE ESTUDIANTE ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM ESTUDIANTE);
ALTER TABLE PROFESOR ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM PROFESOR);
ALTER TABLE CURSO ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM CURSO);
ALTER TABLE INSCRIPCION ALTER COLUMN ID RESTART WITH (SELECT COALESCE(MAX(ID), 0) + 1 FROM INSCRIPCION);