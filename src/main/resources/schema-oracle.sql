-- ===============================================================
-- SCHEMA UNIVERSIDAD - ORACLE SQL
-- Crea tablas solo si no existen. Inserta datos solo si no existen.
-- No borra datos existentes. Compatible con ejecutores que usan '/'.
-- ===============================================================

-- PERSONA
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE PERSONA (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NOMBRES VARCHAR2(255) NOT NULL,
      APELLIDOS VARCHAR2(255) NOT NULL,
      EMAIL VARCHAR2(255)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- FACULTAD
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE FACULTAD (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NOMBRE VARCHAR2(255) NOT NULL,
      DECANO_ID NUMBER,
      CONSTRAINT FK_FACULTAD_DECANO FOREIGN KEY (DECANO_ID) REFERENCES PERSONA(ID)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- PROGRAMA
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE PROGRAMA (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NOMBRE VARCHAR2(255) NOT NULL,
      DURACION NUMBER,
      REGISTRO_CALIFICADO DATE,
      FACULTAD_ID NUMBER,
      CONSTRAINT FK_PROG_FACULTAD FOREIGN KEY (FACULTAD_ID) REFERENCES FACULTAD(ID)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- ESTUDIANTE
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE ESTUDIANTE (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NOMBRES VARCHAR2(255) NOT NULL,
      APELLIDOS VARCHAR2(255) NOT NULL,
      EMAIL VARCHAR2(255),
      CODIGO NUMBER
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- PROFESOR
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE PROFESOR (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NOMBRES VARCHAR2(255) NOT NULL,
      APELLIDOS VARCHAR2(255) NOT NULL,
      EMAIL VARCHAR2(255),
      TIPO_CONTRATO VARCHAR2(255)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- CURSO
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE CURSO (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NOMBRE VARCHAR2(255) NOT NULL,
      PROGRAMA_ID NUMBER,
      ACTIVO NUMBER(1),
      CONSTRAINT FK_CURSO_PROG FOREIGN KEY (PROGRAMA_ID) REFERENCES PROGRAMA(ID)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- INSCRIPCION
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE INSCRIPCION (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      ANO NUMBER,
      SEMESTRE NUMBER,
      ESTUDIANTE_ID NUMBER,
      CURSO_ID NUMBER,
      CONSTRAINT FK_INSC_ESTUD FOREIGN KEY (ESTUDIANTE_ID) REFERENCES ESTUDIANTE(ID),
      CONSTRAINT FK_INSC_CURSO FOREIGN KEY (CURSO_ID) REFERENCES CURSO(ID)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- CURSOPROFESOR
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE CURSOPROFESOR (
      PROFESOR_ID NUMBER,
      CURSO_ID NUMBER,
      ANO INT,
      SEMESTRE INT,
      PRIMARY KEY (PROFESOR_ID, CURSO_ID, ANO, SEMESTRE),
      CONSTRAINT FK_CP_PROFESOR FOREIGN KEY (PROFESOR_ID) REFERENCES PROFESOR(ID),
      CONSTRAINT FK_CP_CURSO FOREIGN KEY (CURSO_ID) REFERENCES CURSO(ID)
    )
  ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

-- ===============================================================
-- DATOS DE EJEMPLO: solo se insertan si no existen (usando MERGE)
-- ===============================================================

-- PERSONA
MERGE INTO PERSONA t
USING (SELECT 'Ricardo' AS NOMBRES, 'Perez' AS APELLIDOS, 'ricardo.perez@university.com' AS EMAIL FROM DUAL) s
ON (t.EMAIL = s.EMAIL)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL);

MERGE INTO PERSONA t
USING (SELECT 'Ana' AS NOMBRES, 'Lopez' AS APELLIDOS, 'ana.lopez@university.com' AS EMAIL FROM DUAL) s
ON (t.EMAIL = s.EMAIL)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL);

MERGE INTO PERSONA t
USING (SELECT 'Luis' AS NOMBRES, 'Martinez' AS APELLIDOS, 'luis.martinez@external.com' AS EMAIL FROM DUAL) s
ON (t.EMAIL = s.EMAIL)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL);

-- FACULTAD
MERGE INTO FACULTAD t
USING (SELECT 'Ingeniería' AS NOMBRE, 1 AS DECANO_ID FROM DUAL) s
ON (t.NOMBRE = s.NOMBRE)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, DECANO_ID) VALUES (s.NOMBRE, s.DECANO_ID);

MERGE INTO FACULTAD t
USING (SELECT 'Ciencias Sociales' AS NOMBRE, CAST(NULL AS NUMBER) AS DECANO_ID FROM DUAL) s
ON (t.NOMBRE = s.NOMBRE)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, DECANO_ID) VALUES (s.NOMBRE, s.DECANO_ID);

-- PROGRAMA
MERGE INTO PROGRAMA t
USING (
  SELECT 'Ingeniería de Sistemas' AS NOMBRE, 10 AS DURACION,
         TO_DATE('2023-01-15', 'YYYY-MM-DD') AS REGISTRO_CALIFICADO, 1 AS FACULTAD_ID
  FROM DUAL
) s
ON (t.NOMBRE = s.NOMBRE)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, DURACION, REGISTRO_CALIFICADO, FACULTAD_ID)
  VALUES (s.NOMBRE, s.DURACION, s.REGISTRO_CALIFICADO, s.FACULTAD_ID);

MERGE INTO PROGRAMA t
USING (
  SELECT 'Comunicación Social' AS NOMBRE, 8 AS DURACION,
         TO_DATE('2022-05-20', 'YYYY-MM-DD') AS REGISTRO_CALIFICADO, 2 AS FACULTAD_ID
  FROM DUAL
) s
ON (t.NOMBRE = s.NOMBRE)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, DURACION, REGISTRO_CALIFICADO, FACULTAD_ID)
  VALUES (s.NOMBRE, s.DURACION, s.REGISTRO_CALIFICADO, s.FACULTAD_ID);

-- PROFESOR
MERGE INTO PROFESOR t
USING (SELECT 'Carlos' AS NOMBRES, 'Ramirez' AS APELLIDOS, 'carlos.r@university.com' AS EMAIL, 'Tiempo Completo' AS TIPO_CONTRATO FROM DUAL) s
ON (t.EMAIL = s.EMAIL)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL, TIPO_CONTRATO) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL, s.TIPO_CONTRATO);

MERGE INTO PROFESOR t
USING (SELECT 'Marta' AS NOMBRES, 'Jimenez' AS APELLIDOS, 'marta.j@university.com' AS EMAIL, 'Cátedra' AS TIPO_CONTRATO FROM DUAL) s
ON (t.EMAIL = s.EMAIL)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL, TIPO_CONTRATO) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL, s.TIPO_CONTRATO);

-- ESTUDIANTE
MERGE INTO ESTUDIANTE t
USING (SELECT 'Juan' AS NOMBRES, 'Gomez' AS APELLIDOS, 'juan.g@student.com' AS EMAIL, 20241001 AS CODIGO FROM DUAL) s
ON (t.CODIGO = s.CODIGO)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL, CODIGO) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL, s.CODIGO);

MERGE INTO ESTUDIANTE t
USING (SELECT 'Maria' AS NOMBRES, 'Rodriguez' AS APELLIDOS, 'maria.r@student.com' AS EMAIL, 20241002 AS CODIGO FROM DUAL) s
ON (t.CODIGO = s.CODIGO)
WHEN NOT MATCHED THEN
  INSERT (NOMBRES, APELLIDOS, EMAIL, CODIGO) VALUES (s.NOMBRES, s.APELLIDOS, s.EMAIL, s.CODIGO);

-- CURSO
MERGE INTO CURSO t
USING (SELECT 'Cálculo Diferencial' AS NOMBRE, 1 AS PROGRAMA_ID, 1 AS ACTIVO FROM DUAL) s
ON (t.NOMBRE = s.NOMBRE AND t.PROGRAMA_ID = s.PROGRAMA_ID)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, PROGRAMA_ID, ACTIVO) VALUES (s.NOMBRE, s.PROGRAMA_ID, s.ACTIVO);

MERGE INTO CURSO t
USING (SELECT 'Programación Orientada a Objetos' AS NOMBRE, 1 AS PROGRAMA_ID, 1 AS ACTIVO FROM DUAL) s
ON (t.NOMBRE = s.NOMBRE AND t.PROGRAMA_ID = s.PROGRAMA_ID)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, PROGRAMA_ID, ACTIVO) VALUES (s.NOMBRE, s.PROGRAMA_ID, s.ACTIVO);

MERGE INTO CURSO t
USING (SELECT 'Teorías de la Comunicación' AS NOMBRE, 2 AS PROGRAMA_ID, 0 AS ACTIVO FROM DUAL) s
ON (t.NOMBRE = s.NOMBRE AND t.PROGRAMA_ID = s.PROGRAMA_ID)
WHEN NOT MATCHED THEN
  INSERT (NOMBRE, PROGRAMA_ID, ACTIVO) VALUES (s.NOMBRE, s.PROGRAMA_ID, s.ACTIVO);

-- CURSOPROFESOR
MERGE INTO CURSOPROFESOR t
USING (SELECT 1 AS PROFESOR_ID, 1 AS CURSO_ID, 2025 AS ANO, 1 AS SEMESTRE FROM DUAL) s
ON (t.PROFESOR_ID = s.PROFESOR_ID AND t.CURSO_ID = s.CURSO_ID AND t.ANO = s.ANO AND t.SEMESTRE = s.SEMESTRE)
WHEN NOT MATCHED THEN
  INSERT (PROFESOR_ID, CURSO_ID, ANO, SEMESTRE) VALUES (s.PROFESOR_ID, s.CURSO_ID, s.ANO, s.SEMESTRE);

MERGE INTO CURSOPROFESOR t
USING (SELECT 2 AS PROFESOR_ID, 2 AS CURSO_ID, 2025 AS ANO, 1 AS SEMESTRE FROM DUAL) s
ON (t.PROFESOR_ID = s.PROFESOR_ID AND t.CURSO_ID = s.CURSO_ID AND t.ANO = s.ANO AND t.SEMESTRE = s.SEMESTRE)
WHEN NOT MATCHED THEN
  INSERT (PROFESOR_ID, CURSO_ID, ANO, SEMESTRE) VALUES (s.PROFESOR_ID, s.CURSO_ID, s.ANO, s.SEMESTRE);

-- INSCRIPCION
MERGE INTO INSCRIPCION t
USING (SELECT 1 AS ESTUDIANTE_ID, 1 AS CURSO_ID, 2025 AS ANO, 1 AS SEMESTRE FROM DUAL) s
ON (t.ESTUDIANTE_ID = s.ESTUDIANTE_ID AND t.CURSO_ID = s.CURSO_ID AND t.ANO = s.ANO AND t.SEMESTRE = s.SEMESTRE)
WHEN NOT MATCHED THEN
  INSERT (ESTUDIANTE_ID, CURSO_ID, ANO, SEMESTRE) VALUES (s.ESTUDIANTE_ID, s.CURSO_ID, s.ANO, s.SEMESTRE);

MERGE INTO INSCRIPCION t
USING (SELECT 2 AS ESTUDIANTE_ID, 2 AS CURSO_ID, 2025 AS ANO, 1 AS SEMESTRE FROM DUAL) s
ON (t.ESTUDIANTE_ID = s.ESTUDIANTE_ID AND t.CURSO_ID = s.CURSO_ID AND t.ANO = s.ANO AND t.SEMESTRE = s.SEMESTRE)
WHEN NOT MATCHED THEN
  INSERT (ESTUDIANTE_ID, CURSO_ID, ANO, SEMESTRE) VALUES (s.ESTUDIANTE_ID, s.CURSO_ID, s.ANO, s.SEMESTRE);